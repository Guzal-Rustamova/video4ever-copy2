{"ast":null,"code":"var _jsxFileName = \"/Users/guzalrustamova/Desktop/Software Engineering/video4ever-copy2/client/src/App.js\",\n  _s = $RefreshSig$();\n// Video4Ever Starter Code\n// Dr. Miller\n// Start your React app using npm start while in the client directory\n\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Select from 'react-select';\n\n// You can use this function for sending POST requests You can modify it if you want to use it for GET requests as well\n// This is an asynchronous function meaning that it returns a Promise\n// A Promise means it will either return a valid value or reject the request\n// Promises are important for  operations that take time such as querying a database or fetching data from a server\n// Using await means this function will suspend execution until the Promise resolves so it won't return until it has a response\n// The await keyword only works in asynchronous functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function postData(url = \"\", data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\",\n    // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\",\n    // no-cors, *cors, same-origin\n    cache: \"no-cache\",\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\",\n    // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: \"follow\",\n    // manual, *follow, error\n    referrerPolicy: \"no-referrer\",\n    // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\nfunction App() {\n  _s();\n  // Use this variable whenever you want to connect to the Node.js server\n  // When you create production version of a React app, this address will change\n  const options = [{\n    value: \"downtown naperville\",\n    label: \"Downtown Naperville\"\n  }, {\n    value: \"downtown yorkville\",\n    label: \"Downtown Yorkville\"\n  }, {\n    value: \"south naperville\",\n    label: \"South Naperville\"\n  }, {\n    value: \"downtown oswego\",\n    label: \"Downtown Oswego\"\n  }];\n  const baseURL = \"http://localhost:8000/\";\n  const responsePromise = fetch(baseURL, options);\n  const customStyles = {\n    option: (defaultStyles, state) => ({\n      ...defaultStyles,\n      color: state.isSelected ? \"#212529\" : \"#fff\",\n      backgroundColor: state.isSelected ? \"#a0a0a0\" : \"#212529\"\n    }),\n    control: defaultStyles => ({\n      ...defaultStyles,\n      backgroundColor: \"#212529\",\n      padding: \"10px\",\n      border: \"none\",\n      boxShadow: \"none\"\n    }),\n    singleValue: defaultStyles => ({\n      ...defaultStyles,\n      color: \"#fff\"\n    })\n  };\n  const [selected, setSelected] = useState(null);\n  const handleChange = selectedOption => {\n    setSelected(selectedOption);\n    console.log('Option selected:', selectedOption);\n  };\n\n  // This is an example variable (message) that can be changed with the setMessage function\n  // The initial state of the message is an empty string. When the variable is changed, it changes everywhere it is used.\n  // This is referred to as a state hook\n  const [message, setMessage] = useState(\"\");\n\n  // useEffect will run when the app loads\n  // This is referred to as an effect hook\n  // This effect will modify the message based on what is returned from a GET request to the server's message \n  useEffect(() => {\n    fetch(`${baseURL}message`).then(res => res.json()).then(data => {\n      setMessage(data.message);\n    });\n  }, []);\n  const [selectedBranch, setSelectedBranch] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    if (selectedBranch) {\n      fetch('http://localhost:8000/movies?branch=${selectedBranch}').then(response => response.json()).then(data => setMovies(data)).catch(error => console.error('Error fetching data', error));\n    }\n  }, [selectedBranch]);\n  const handleBranchChange = event => {\n    setSelectedBranch(event.target.value);\n  };\n  throw new Error(message);\n\n  // The message variable is displayed below and will update, if necessary\n  // You can put any Javascript (JSX) code within curly brackets in a React app\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Menu\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          options: options,\n          styles: customStyles,\n          onChange: handleChange,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"app-data\",\n          children: movies.map(movie => /*#__PURE__*/React.createElement('div', {\n            key: movie.MovieCode,\n            className: 'movie item'\n          }, /*#__PURE__*/React.createElement('h2', {}, movie.Title), /*#__PURE__*/React.createElement('p', {}, 'Director: ${movie.DirectorFirst} ${movie.DirectorLast'), /*#__PURE__*/React.createElement('p', {}, 'Price: $${movie.Price'), /*#__PURE__*/React.createElement('p', {}, 'On Hand: ${movie.Onhand'), /*#__PURE__*/React.createElement('p', {}, 'Branch Number: ${movie.BranchNum')))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AElUpTUm/kyEoUK5is7eE2dNmpI=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","postData","url","data","response","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","json","App","_s","options","value","label","baseURL","responsePromise","customStyles","option","defaultStyles","state","color","isSelected","backgroundColor","control","padding","border","boxShadow","singleValue","selected","setSelected","handleChange","selectedOption","console","log","message","setMessage","then","res","selectedBranch","setSelectedBranch","movies","setMovies","catch","error","handleBranchChange","event","target","Error","className","children","styles","onChange","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","createElement","key","MovieCode","Title","_c","$RefreshReg$"],"sources":["/Users/guzalrustamova/Desktop/Software Engineering/video4ever-copy2/client/src/App.js"],"sourcesContent":["// Video4Ever Starter Code\n// Dr. Miller\n// Start your React app using npm start while in the client directory\n\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Select from 'react-select';\n\n  // You can use this function for sending POST requests You can modify it if you want to use it for GET requests as well\n  // This is an asynchronous function meaning that it returns a Promise\n  // A Promise means it will either return a valid value or reject the request\n  // Promises are important for  operations that take time such as querying a database or fetching data from a server\n  // Using await means this function will suspend execution until the Promise resolves so it won't return until it has a response\n  // The await keyword only works in asynchronous functions\n  async function postData(url = \"\", data = {}) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, *cors, same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: \"follow\", // manual, *follow, error\n      referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n\nfunction App() {\n  // Use this variable whenever you want to connect to the Node.js server\n  // When you create production version of a React app, this address will change\n  const options = [\n    {value: \"downtown naperville\", label: \"Downtown Naperville\"},\n    {value: \"downtown yorkville\", label: \"Downtown Yorkville\"}, \n    {value: \"south naperville\", label: \"South Naperville\"}, \n    {value: \"downtown oswego\", label: \"Downtown Oswego\"},\n  ];\n \n  const baseURL = \"http://localhost:8000/\";\n\n  const responsePromise = fetch(baseURL, options);\n\n\n  const customStyles = { \n    option: (defaultStyles, state) => ({\n      ...defaultStyles, \n      color: state.isSelected ? \"#212529\": \"#fff\",\n      backgroundColor: state.isSelected ? \"#a0a0a0\" : \"#212529\", \n    }),\n\n    control: (defaultStyles) => ({\n      ...defaultStyles, \n      backgroundColor: \"#212529\", \n      padding: \"10px\", \n      border: \"none\", \n      boxShadow: \"none\",\n    }),\n    singleValue: (defaultStyles) => ({...defaultStyles, color: \"#fff\"}),\n  }\n\n  const [selected, setSelected] = useState(null); \n\n  const handleChange = (selectedOption) => {\n    setSelected (selectedOption);\n    console.log('Option selected:', selectedOption);\n  };\n\n\n\n  \n\n\n\n\n  // This is an example variable (message) that can be changed with the setMessage function\n  // The initial state of the message is an empty string. When the variable is changed, it changes everywhere it is used.\n  // This is referred to as a state hook\n  const [message, setMessage] = useState(\"\");\n\n  // useEffect will run when the app loads\n  // This is referred to as an effect hook\n  // This effect will modify the message based on what is returned from a GET request to the server's message \n  useEffect(() => {\n    fetch(`${baseURL}message`)\n      .then((res) => res.json())\n      .then((data) => {setMessage(data.message);}\n      );\n  }, []);\n\n  const[selectedBranch, setSelectedBranch] = useState(\"\");\n  const[movies, setMovies] = useState([]);\n\n  useEffect(()=>{\n    if (selectedBranch){\n      fetch('http://localhost:8000/movies?branch=${selectedBranch}')\n      .then(response => response.json())\n      .then(data => setMovies(data))\n      .catch(error => console.error('Error fetching data', error));\n    }\n\n  }, [selectedBranch]);\n\n  const handleBranchChange = (event) => {\n    setSelectedBranch(event.target.value);\n  }\n\n\n\n\n  throw new Error(message);\n\n\n\n  \n\n  \n  \n\n  // The message variable is displayed below and will update, if necessary\n  // You can put any Javascript (JSX) code within curly brackets in a React app\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"Menu\"> \n          <Select options = {options} styles = {customStyles} onChange = {handleChange} autoFocus = {true}/>\n\n          <div className = \"app-data\"> \n          {\n            movies.map((movie) => React.createElement('div', {key: movie.MovieCode, className: 'movie item'}, \n              React.createElement('h2', {}, movie.Title), \n              React.createElement('p', {}, 'Director: ${movie.DirectorFirst} ${movie.DirectorLast'), \n              React.createElement('p', {}, 'Price: $${movie.Price'), \n              React.createElement('p', {}, 'On Hand: ${movie.Onhand'), \n              React.createElement('p', {}, 'Branch Number: ${movie.BranchNum')\n            \n            ))\n          }\n          \n          </div>\n        \n        </div>\n      </header>\n      \n    </div>\n  );\n        }; \n\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}