{"ast":null,"code":"var _jsxFileName = \"/Users/guzalrustamova/Desktop/Software Engineering/video4ever-copy2/client/src/App.js\",\n  _s = $RefreshSig$();\n// Video4Ever Starter Code\n// Dr. Miller\n// Start your React app using npm start while in the client directory\n\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Select from 'react-select';\n\n// You can use this function for sending POST requests You can modify it if you want to use it for GET requests as well\n// This is an asynchronous function meaning that it returns a Promise\n// A Promise means it will either return a valid value or reject the request\n// Promises are important for  operations that take time such as querying a database or fetching data from a server\n// Using await means this function will suspend execution until the Promise resolves so it won't return until it has a response\n// The await keyword only works in asynchronous functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function postData(url = \"\", data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\",\n    // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\",\n    // no-cors, *cors, same-origin\n    cache: \"no-cache\",\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\",\n    // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: \"follow\",\n    // manual, *follow, error\n    referrerPolicy: \"no-referrer\",\n    // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\nfunction App() {\n  _s();\n  // Use this variable whenever you want to connect to the Node.js server\n  // When you create production version of a React app, this address will change\n  const options = [{\n    value: \"downtown naperville\",\n    label: \"Downtown Naperville\"\n  }, {\n    value: \"downtown yorkville\",\n    label: \"Downtown Yorkville\"\n  }, {\n    value: \"south naperville\",\n    label: \"South Naperville\"\n  }, {\n    value: \"downtown oswego\",\n    label: \"Downtown Oswego\"\n  }];\n  const baseURL = \"http://localhost:8000/\";\n  const responsePromise = fetch(baseURL, options);\n  const customStyles = {\n    option: (defaultStyles, state) => ({\n      ...defaultStyles,\n      color: state.isSelected ? \"#212529\" : \"#fff\",\n      backgroundColor: state.isSelected ? \"#a0a0a0\" : \"#212529\"\n    }),\n    control: defaultStyles => ({\n      ...defaultStyles,\n      backgroundColor: \"#212529\",\n      padding: \"10px\",\n      border: \"none\",\n      boxShadow: \"none\"\n    }),\n    singleValue: defaultStyles => ({\n      ...defaultStyles,\n      color: \"#fff\"\n    })\n  };\n  const [selected, setSelected] = useState(null);\n  const handleChange = selectedOption => {\n    setSelected(selectedOption);\n    console.log('Option selected:', selectedOption);\n  };\n\n  // This is an example variable (message) that can be changed with the setMessage function\n  // The initial state of the message is an empty string. When the variable is changed, it changes everywhere it is used.\n  // This is referred to as a state hook\n  const [message, setMessage] = useState(\"\");\n\n  // useEffect will run when the app loads\n  // This is referred to as an effect hook\n  // This effect will modify the message based on what is returned from a GET request to the server's message \n  useEffect(() => {\n    fetch(`${baseURL}message`).then(res => res.json()).then(data => {\n      setMessage(data.message);\n    });\n  }, []);\n\n  // The message variable is displayed below and will update, if necessary\n  // You can put any Javascript (JSX) code within curly brackets in a React app\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Menu\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          options: options,\n          styles: customStyles,\n          onChange: handleChange,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            children: [/*#__PURE__*/_jsxDEV(\"thread\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Movie Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Movie Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Director\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Movies on Hand\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: data.map(d => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: d.MovieTitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: d.MoviePrice\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: d.Director\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: d.MoviesOnHand\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 19\n                }, this)]\n              }, i, true, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TcMvnH4nGg05vs+NmLNi5mzjsIo=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","postData","url","data","response","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","json","App","_s","options","value","label","baseURL","responsePromise","customStyles","option","defaultStyles","state","color","isSelected","backgroundColor","control","padding","border","boxShadow","singleValue","selected","setSelected","handleChange","selectedOption","console","log","message","setMessage","then","res","className","children","styles","onChange","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","map","d","MovieTitle","MoviePrice","Director","MoviesOnHand","i","_c","$RefreshReg$"],"sources":["/Users/guzalrustamova/Desktop/Software Engineering/video4ever-copy2/client/src/App.js"],"sourcesContent":["// Video4Ever Starter Code\n// Dr. Miller\n// Start your React app using npm start while in the client directory\n\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Select from 'react-select';\n\n  // You can use this function for sending POST requests You can modify it if you want to use it for GET requests as well\n  // This is an asynchronous function meaning that it returns a Promise\n  // A Promise means it will either return a valid value or reject the request\n  // Promises are important for  operations that take time such as querying a database or fetching data from a server\n  // Using await means this function will suspend execution until the Promise resolves so it won't return until it has a response\n  // The await keyword only works in asynchronous functions\n  async function postData(url = \"\", data = {}) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"cors\", // no-cors, *cors, same-origin\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: \"same-origin\", // include, *same-origin, omit\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // 'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      redirect: \"follow\", // manual, *follow, error\n      referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n\nfunction App() {\n  // Use this variable whenever you want to connect to the Node.js server\n  // When you create production version of a React app, this address will change\n  const options = [\n    {value: \"downtown naperville\", label: \"Downtown Naperville\"},\n    {value: \"downtown yorkville\", label: \"Downtown Yorkville\"}, \n    {value: \"south naperville\", label: \"South Naperville\"}, \n    {value: \"downtown oswego\", label: \"Downtown Oswego\"},\n  ];\n \n  const baseURL = \"http://localhost:8000/\";\n\n  const responsePromise = fetch(baseURL, options);\n\n  \n  const customStyles = { \n    option: (defaultStyles, state) => ({\n      ...defaultStyles, \n      color: state.isSelected ? \"#212529\": \"#fff\",\n      backgroundColor: state.isSelected ? \"#a0a0a0\" : \"#212529\", \n    }),\n\n    control: (defaultStyles) => ({\n      ...defaultStyles, \n      backgroundColor: \"#212529\", \n      padding: \"10px\", \n      border: \"none\", \n      boxShadow: \"none\",\n    }),\n    singleValue: (defaultStyles) => ({...defaultStyles, color: \"#fff\"}),\n  }\n\n  const [selected, setSelected] = useState(null); \n\n  const handleChange = (selectedOption) => {\n    setSelected (selectedOption);\n    console.log('Option selected:', selectedOption);\n  };\n\n\n  \n\n\n\n\n  // This is an example variable (message) that can be changed with the setMessage function\n  // The initial state of the message is an empty string. When the variable is changed, it changes everywhere it is used.\n  // This is referred to as a state hook\n  const [message, setMessage] = useState(\"\");\n\n  // useEffect will run when the app loads\n  // This is referred to as an effect hook\n  // This effect will modify the message based on what is returned from a GET request to the server's message \n  useEffect(() => {\n    fetch(`${baseURL}message`)\n      .then((res) => res.json())\n      .then((data) => {setMessage(data.message);}\n      );\n  }, []);\n\n  \n  \n\n  // The message variable is displayed below and will update, if necessary\n  // You can put any Javascript (JSX) code within curly brackets in a React app\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"Menu\"> \n          <Select options = {options} styles = {customStyles} onChange = {handleChange} autoFocus = {true}/>\n\n          <div className = \"mt-4\"> \n          \n          <table> \n              <thread> \n                <th>Movie Title</th>\n                <th>Movie Price</th>\n                <th>Director</th>\n                <th>Movies on Hand</th>\n              </thread>\n              <tbody>\n                {data.map(d => \n                  <tr key = {i}> \n                  <td>{d.MovieTitle}</td>\n                  <td>{d.MoviePrice}</td>\n                  <td>{d.Director}</td>\n                  <td>{d.MoviesOnHand}</td>\n                  \n                  </tr>\n                  \n                  )}\n              </tbody>\n\n            </table>\n          \n          </div>\n        \n        </div>\n      </header>\n      \n    </div>\n  );\n  \n};\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;;AAEA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,cAAc;;AAE/B;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAeC,QAAQA,CAACC,GAAG,GAAG,EAAE,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAC3C;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAChCI,MAAM,EAAE,MAAM;IAAE;IAChBC,IAAI,EAAE,MAAM;IAAE;IACdC,KAAK,EAAE,UAAU;IAAE;IACnBC,WAAW,EAAE,aAAa;IAAE;IAC5BC,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF,CAAC;IACDC,QAAQ,EAAE,QAAQ;IAAE;IACpBC,cAAc,EAAE,aAAa;IAAE;IAC/BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,IAAI,CAAC,CAAE;EAC9B,CAAC,CAAC;EACF,OAAOC,QAAQ,CAACY,IAAI,CAAC,CAAC,CAAC,CAAC;AAC5B;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA,MAAMC,OAAO,GAAG,CACd;IAACC,KAAK,EAAE,qBAAqB;IAAEC,KAAK,EAAE;EAAqB,CAAC,EAC5D;IAACD,KAAK,EAAE,oBAAoB;IAAEC,KAAK,EAAE;EAAoB,CAAC,EAC1D;IAACD,KAAK,EAAE,kBAAkB;IAAEC,KAAK,EAAE;EAAkB,CAAC,EACtD;IAACD,KAAK,EAAE,iBAAiB;IAAEC,KAAK,EAAE;EAAiB,CAAC,CACrD;EAED,MAAMC,OAAO,GAAG,wBAAwB;EAExC,MAAMC,eAAe,GAAGlB,KAAK,CAACiB,OAAO,EAAEH,OAAO,CAAC;EAG/C,MAAMK,YAAY,GAAG;IACnBC,MAAM,EAAEA,CAACC,aAAa,EAAEC,KAAK,MAAM;MACjC,GAAGD,aAAa;MAChBE,KAAK,EAAED,KAAK,CAACE,UAAU,GAAG,SAAS,GAAE,MAAM;MAC3CC,eAAe,EAAEH,KAAK,CAACE,UAAU,GAAG,SAAS,GAAG;IAClD,CAAC,CAAC;IAEFE,OAAO,EAAGL,aAAa,KAAM;MAC3B,GAAGA,aAAa;MAChBI,eAAe,EAAE,SAAS;MAC1BE,OAAO,EAAE,MAAM;MACfC,MAAM,EAAE,MAAM;MACdC,SAAS,EAAE;IACb,CAAC,CAAC;IACFC,WAAW,EAAGT,aAAa,KAAM;MAAC,GAAGA,aAAa;MAAEE,KAAK,EAAE;IAAM,CAAC;EACpE,CAAC;EAED,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAM0C,YAAY,GAAIC,cAAc,IAAK;IACvCF,WAAW,CAAEE,cAAc,CAAC;IAC5BC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,cAAc,CAAC;EACjD,CAAC;;EAQD;EACA;EACA;EACA,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA;EACA;EACAC,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAE,GAAEiB,OAAQ,SAAQ,CAAC,CACvBsB,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAAC7B,IAAI,CAAC,CAAC,CAAC,CACzB4B,IAAI,CAAEzC,IAAI,IAAK;MAACwC,UAAU,CAACxC,IAAI,CAACuC,OAAO,CAAC;IAAC,CAC1C,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAKN;EACA;EACA,oBACE1C,OAAA;IAAK8C,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB/C,OAAA;MAAQ8C,SAAS,EAAC,YAAY;MAAAC,QAAA,eAC5B/C,OAAA;QAAK8C,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnB/C,OAAA,CAACF,MAAM;UAACqB,OAAO,EAAIA,OAAQ;UAAC6B,MAAM,EAAIxB,YAAa;UAACyB,QAAQ,EAAIX,YAAa;UAACY,SAAS,EAAI;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAElGtD,OAAA;UAAK8C,SAAS,EAAG,MAAM;UAAAC,QAAA,eAEvB/C,OAAA;YAAA+C,QAAA,gBACI/C,OAAA;cAAA+C,QAAA,gBACE/C,OAAA;gBAAA+C,QAAA,EAAI;cAAW;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACpBtD,OAAA;gBAAA+C,QAAA,EAAI;cAAW;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACpBtD,OAAA;gBAAA+C,QAAA,EAAI;cAAQ;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACjBtD,OAAA;gBAAA+C,QAAA,EAAI;cAAc;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjB,CAAC,eACTtD,OAAA;cAAA+C,QAAA,EACG5C,IAAI,CAACoD,GAAG,CAACC,CAAC,iBACTxD,OAAA;gBAAA+C,QAAA,gBACA/C,OAAA;kBAAA+C,QAAA,EAAKS,CAAC,CAACC;gBAAU;kBAAAN,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACvBtD,OAAA;kBAAA+C,QAAA,EAAKS,CAAC,CAACE;gBAAU;kBAAAP,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACvBtD,OAAA;kBAAA+C,QAAA,EAAKS,CAAC,CAACG;gBAAQ;kBAAAR,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC,eACrBtD,OAAA;kBAAA+C,QAAA,EAAKS,CAAC,CAACI;gBAAY;kBAAAT,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA,GAJdO,CAAC;gBAAAV,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAMR,CAEJ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEH;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAGV;AAACpC,EAAA,CAvGQD,GAAG;AAAA6C,EAAA,GAAH7C,GAAG;AAuGX;AAED,eAAeA,GAAG;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}