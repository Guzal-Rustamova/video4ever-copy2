{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gurustamova\\\\Desktop\\\\Software Engineering 1\\\\npm\\\\video4ever-copy2\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Video4Ever Starter Code\n// Dr. Miller\n// Start your React app using npm start while in the client directory\n\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport Select from 'react-select';\n\n// You can use this function for sending POST requests You can modify it if you want to use it for GET requests as well\n// This is an asynchronous function meaning that it returns a Promise\n// A Promise means it will either return a valid value or reject the request\n// Promises are important for  operations that take time such as querying a database or fetching data from a server\n// Using await means this function will suspend execution until the Promise resolves so it won't return until it has a response\n// The await keyword only works in asynchronous functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function postData(url = \"\", data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\",\n    // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\",\n    // no-cors, *cors, same-origin\n    cache: \"no-cache\",\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\",\n    // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: \"follow\",\n    // manual, *follow, error\n    referrerPolicy: \"no-referrer\",\n    // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\nfunction App() {\n  _s();\n  // Use this variable whenever you want to connect to the Node.js server\n  // When you create production version of a React app, this address will change\n  const baseURL = \"http://localhost:8000/\";\n  const responsePromise = fetch(baseURL, options);\n\n  /*\r\n  const mysql = require('mysql2'); \r\n    const connection = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'nchs_se', \r\n    password: 'temp2023!',\r\n    database: 'db.redhawks.us'\r\n  });\r\n    \r\n    connection.connect(function(err) {\r\n    if (err) \r\n    {\r\n      console.log(\"Error connecting to the database\", err);\r\n    }\r\n    console.log(\"Connected!\");\r\n  });\r\n  */\n\n  const options = [{\n    value: \"downtown naperville\",\n    label: \"Downtown Naperville\"\n  }, {\n    value: \"downtown yorkville\",\n    label: \"Downtown Yorkville\"\n  }, {\n    value: \"south naperville\",\n    label: \"South Naperville\"\n  }, {\n    value: \"downtown oswego\",\n    label: \"Downtown Oswego\"\n  }];\n  /*const customStyles = { \r\n    option: (defaultStyles, state) => ({\r\n      ...defaultStyles, \r\n      color: state.isSelected ? \"#212529\": \"#fff\",\r\n      backgroundColor: state.isSelected ? \"#a0a0a0\" : \"#212529\", \r\n    }),\r\n      control: (defaultStyles) => ({\r\n      ...defaultStyles, \r\n      backgroundColor: \"#212529\", \r\n      padding: \"10px\", \r\n      border: \"none\", \r\n      boxShadow: \"none\",\r\n    }),\r\n    singleValue: (defaultStyles) => ({...defaultStyles, color: \"#fff\"}),\r\n  }*/\n\n  const [selected, setSelected] = useState(null);\n  const handleChange = selectedOption => {\n    setSelected(selectedOption);\n    console.log('Option selected:', selectedOption);\n  };\n\n  // This is an example variable (message) that can be changed with the setMessage function\n  // The initial state of the message is an empty string. When the variable is changed, it changes everywhere it is used.\n  // This is referred to as a state hook\n  const [message, setMessage] = useState(\"\");\n\n  // useEffect will run when the app loads\n  // This is referred to as an effect hook\n  // This effect will modify the message based on what is returned from a GET request to the server's message \n  useEffect(() => {\n    fetch(`${baseURL}message`).then(res => res.json()).then(data => {\n      setMessage(data.message);\n    });\n  }, []);\n\n  // The message variable is displayed below and will update, if necessary\n  // You can put any Javascript (JSX) code within curly brackets in a React app\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Menu\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          options: options /*styles = {customStyles}*/,\n          onChange: handleChange,\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: selected && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"You've selected \", selected.value]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TcMvnH4nGg05vs+NmLNi5mzjsIo=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Select","jsxDEV","_jsxDEV","Fragment","_Fragment","postData","url","data","response","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","json","App","_s","baseURL","responsePromise","options","value","label","selected","setSelected","handleChange","selectedOption","console","log","message","setMessage","then","res","className","children","onChange","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gurustamova/Desktop/Software Engineering 1/npm/video4ever-copy2/client/src/App.js"],"sourcesContent":["// Video4Ever Starter Code\r\n// Dr. Miller\r\n// Start your React app using npm start while in the client directory\r\n\r\nimport './App.css';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Select from 'react-select';\r\n\r\n  // You can use this function for sending POST requests You can modify it if you want to use it for GET requests as well\r\n  // This is an asynchronous function meaning that it returns a Promise\r\n  // A Promise means it will either return a valid value or reject the request\r\n  // Promises are important for  operations that take time such as querying a database or fetching data from a server\r\n  // Using await means this function will suspend execution until the Promise resolves so it won't return until it has a response\r\n  // The await keyword only works in asynchronous functions\r\n  async function postData(url = \"\", data = {}) {\r\n    // Default options are marked with *\r\n    const response = await fetch(url, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      redirect: \"follow\", // manual, *follow, error\r\n      referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n}\r\n\r\nfunction App() {\r\n  // Use this variable whenever you want to connect to the Node.js server\r\n  // When you create production version of a React app, this address will change\r\n  const baseURL = \"http://localhost:8000/\";\r\n\r\n  const responsePromise = fetch(baseURL, options);\r\n\r\n  /*\r\n  const mysql = require('mysql2'); \r\n\r\n  const connection = mysql.createConnection({\r\n    host: 'localhost',\r\n    user: 'nchs_se', \r\n    password: 'temp2023!',\r\n    database: 'db.redhawks.us'\r\n  });\r\n\r\n  \r\n\r\n  connection.connect(function(err) {\r\n    if (err) \r\n    {\r\n      console.log(\"Error connecting to the database\", err);\r\n    }\r\n    console.log(\"Connected!\");\r\n  });\r\n  */\r\n  \r\n  const options = [\r\n    {value: \"downtown naperville\", label: \"Downtown Naperville\"},\r\n    {value: \"downtown yorkville\", label: \"Downtown Yorkville\"}, \r\n    {value: \"south naperville\", label: \"South Naperville\"}, \r\n    {value: \"downtown oswego\", label: \"Downtown Oswego\"},\r\n  ];\r\n  /*const customStyles = { \r\n    option: (defaultStyles, state) => ({\r\n      ...defaultStyles, \r\n      color: state.isSelected ? \"#212529\": \"#fff\",\r\n      backgroundColor: state.isSelected ? \"#a0a0a0\" : \"#212529\", \r\n    }),\r\n\r\n    control: (defaultStyles) => ({\r\n      ...defaultStyles, \r\n      backgroundColor: \"#212529\", \r\n      padding: \"10px\", \r\n      border: \"none\", \r\n      boxShadow: \"none\",\r\n    }),\r\n    singleValue: (defaultStyles) => ({...defaultStyles, color: \"#fff\"}),\r\n  }*/\r\n\r\n  const [selected, setSelected] = useState(null); \r\n\r\n  const handleChange = (selectedOption) => {\r\n    setSelected (selectedOption);\r\n    console.log('Option selected:', selectedOption);\r\n  };\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n  // This is an example variable (message) that can be changed with the setMessage function\r\n  // The initial state of the message is an empty string. When the variable is changed, it changes everywhere it is used.\r\n  // This is referred to as a state hook\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // useEffect will run when the app loads\r\n  // This is referred to as an effect hook\r\n  // This effect will modify the message based on what is returned from a GET request to the server's message \r\n  useEffect(() => {\r\n    fetch(`${baseURL}message`)\r\n      .then((res) => res.json())\r\n      .then((data) => {setMessage(data.message);}\r\n      );\r\n  }, []);\r\n  \r\n\r\n  // The message variable is displayed below and will update, if necessary\r\n  // You can put any Javascript (JSX) code within curly brackets in a React app\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"Menu\"> \r\n          <Select options = {options} /*styles = {customStyles}*/ onChange = {handleChange} autoFocus = {true}/>\r\n\r\n          <div className = \"mt-4\"> \r\n            {selected && <>You've selected {selected.value}</>}\r\n          </div>\r\n        \r\n        </div>\r\n      </header>\r\n      \r\n    </div>\r\n  );\r\n  \r\n};\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}